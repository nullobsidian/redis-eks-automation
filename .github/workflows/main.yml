name: EKS CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install kubectl
      run: |
        curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
        echo "kubectl version:"
        kubectl version --client

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
    
    - name: Setup Kubeconfig
      run: |
        eksctl utils write-kubeconfig --cluster ${{ secrets.EKS_CLUSTER_NAME }} --set-kubeconfig-context

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install ansible -y
        ansible --version

    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i inventory/hosts playbook.yml --extra-vars "redis_password=${{ secrets.REDIS_PASSWORD }}"

        - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
  
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Start Flask Application & Notify
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        FLASK_APP=app.py FLASK_RUN_PORT=5000 flask run &
        curl -X POST $SLACK_WEBHOOK_URL -H "Content-Type: application/json" -d '{"text": "Deployment Status: Success\nEnvironment: Production\nVersion: ${GITHUB_SHA}"}'
